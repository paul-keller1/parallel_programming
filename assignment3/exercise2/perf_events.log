  branch-instructions OR branches                    [Hardware event]
  branch-misses                                      [Hardware event]
  cache-misses                                       [Hardware event]
  cache-references                                   [Hardware event]
  cpu-cycles OR cycles                               [Hardware event]
  instructions                                       [Hardware event]
  ref-cycles                                         [Hardware event]
  stalled-cycles-backend OR idle-cycles-backend      [Hardware event]
  stalled-cycles-frontend OR idle-cycles-frontend    [Hardware event]
  alignment-faults                                   [Software event]
  bpf-output                                         [Software event]
  cgroup-switches                                    [Software event]
  context-switches OR cs                             [Software event]
  cpu-clock                                          [Software event]
  cpu-migrations OR migrations                       [Software event]
  dummy                                              [Software event]
  emulation-faults                                   [Software event]
  major-faults                                       [Software event]
  minor-faults                                       [Software event]
  page-faults OR faults                              [Software event]
  task-clock                                         [Software event]
  duration_time                                      [Tool event]
  L1-dcache-load-misses                              [Hardware cache event]
  L1-dcache-loads                                    [Hardware cache event]
  L1-dcache-prefetch-misses                          [Hardware cache event]
  L1-dcache-prefetches                               [Hardware cache event]
  L1-dcache-store-misses                             [Hardware cache event]
  L1-dcache-stores                                   [Hardware cache event]
  L1-icache-load-misses                              [Hardware cache event]
  L1-icache-loads                                    [Hardware cache event]
  LLC-load-misses                                    [Hardware cache event]
  LLC-loads                                          [Hardware cache event]
  LLC-prefetch-misses                                [Hardware cache event]
  LLC-prefetches                                     [Hardware cache event]
  LLC-store-misses                                   [Hardware cache event]
  LLC-stores                                         [Hardware cache event]
  branch-load-misses                                 [Hardware cache event]
  branch-loads                                       [Hardware cache event]
  dTLB-load-misses                                   [Hardware cache event]
  dTLB-loads                                         [Hardware cache event]
  dTLB-store-misses                                  [Hardware cache event]
  dTLB-stores                                        [Hardware cache event]
  iTLB-load-misses                                   [Hardware cache event]
  iTLB-loads                                         [Hardware cache event]
  node-load-misses                                   [Hardware cache event]
  node-loads                                         [Hardware cache event]
  node-prefetch-misses                               [Hardware cache event]
  node-prefetches                                    [Hardware cache event]
  node-store-misses                                  [Hardware cache event]
  node-stores                                        [Hardware cache event]
  branch-instructions OR cpu/branch-instructions/    [Kernel PMU event]
  branch-misses OR cpu/branch-misses/                [Kernel PMU event]
  cache-misses OR cpu/cache-misses/                  [Kernel PMU event]
  cache-references OR cpu/cache-references/          [Kernel PMU event]
  cpu-cycles OR cpu/cpu-cycles/                      [Kernel PMU event]
  instructions OR cpu/instructions/                  [Kernel PMU event]
  mem-loads OR cpu/mem-loads/                        [Kernel PMU event]
  ref-cycles OR cpu/ref-cycles/                      [Kernel PMU event]
  stalled-cycles-backend OR cpu/stalled-cycles-backend/ [Kernel PMU event]
  stalled-cycles-frontend OR cpu/stalled-cycles-frontend/ [Kernel PMU event]
  cstate_core/c3-residency/                          [Kernel PMU event]
  cstate_core/c6-residency/                          [Kernel PMU event]
  cstate_pkg/c3-residency/                           [Kernel PMU event]
  cstate_pkg/c6-residency/                           [Kernel PMU event]
  cstate_pkg/c7-residency/                           [Kernel PMU event]
  msr/aperf/                                         [Kernel PMU event]
  msr/cpu_thermal_margin/                            [Kernel PMU event]
  msr/mperf/                                         [Kernel PMU event]
  msr/smi/                                           [Kernel PMU event]
  msr/tsc/                                           [Kernel PMU event]
  uncore/clockticks/                                 [Kernel PMU event]
  uncore/qhl_request_ioh_reads/                      [Kernel PMU event]
  uncore/qhl_request_ioh_writes/                     [Kernel PMU event]
  uncore/qhl_request_local_reads/                    [Kernel PMU event]
  uncore/qhl_request_local_writes/                   [Kernel PMU event]
  uncore/qhl_request_remote_reads/                   [Kernel PMU event]
  uncore/qhl_request_remote_writes/                  [Kernel PMU event]
  uncore/qmc_normal_reads_any/                       [Kernel PMU event]
  uncore/qmc_writes_full_any/                        [Kernel PMU event]

cache:
  cache_lock_cycles.l1d                             
       [Cycles L1D locked]
  cache_lock_cycles.l1d_l2                          
       [Cycles L1D and L2 locked]
  l1d.m_evict                                       
       [L1D cache lines replaced in M state]
  l1d.m_repl                                        
       [L1D cache lines allocated in the M state]
  l1d.m_snoop_evict                                 
       [L1D snoop eviction of cache lines in M state]
  l1d.repl                                          
       [L1 data cache lines allocated]
  l1d_cache_prefetch_lock_fb_hit                    
       [L1D prefetch load lock accepted in fill buffer]
  l1d_prefetch.miss                                 
       [L1D hardware prefetch misses]
  l1d_prefetch.requests                             
       [L1D hardware prefetch requests]
  l1d_prefetch.triggers                             
       [L1D hardware prefetch requests triggered]
  l1d_wb_l2.e_state                                 
       [L1 writebacks to L2 in E state]
  l1d_wb_l2.i_state                                 
       [L1 writebacks to L2 in I state (misses)]
  l1d_wb_l2.m_state                                 
       [L1 writebacks to L2 in M state]
  l1d_wb_l2.mesi                                    
       [All L1 writebacks to L2]
  l1d_wb_l2.s_state                                 
       [L1 writebacks to L2 in S state]
  l2_data_rqsts.any                                 
       [All L2 data requests]
  l2_data_rqsts.demand.e_state                      
       [L2 data demand loads in E state]
  l2_data_rqsts.demand.i_state                      
       [L2 data demand loads in I state (misses)]
  l2_data_rqsts.demand.m_state                      
       [L2 data demand loads in M state]
  l2_data_rqsts.demand.mesi                         
       [L2 data demand requests]
  l2_data_rqsts.demand.s_state                      
       [L2 data demand loads in S state]
  l2_data_rqsts.prefetch.e_state                    
       [L2 data prefetches in E state]
  l2_data_rqsts.prefetch.i_state                    
       [L2 data prefetches in the I state (misses)]
  l2_data_rqsts.prefetch.m_state                    
       [L2 data prefetches in M state]
  l2_data_rqsts.prefetch.mesi                       
       [All L2 data prefetches]
  l2_data_rqsts.prefetch.s_state                    
       [L2 data prefetches in the S state]
  l2_lines_in.any                                   
       [L2 lines alloacated]
  l2_lines_in.e_state                               
       [L2 lines allocated in the E state]
  l2_lines_in.s_state                               
       [L2 lines allocated in the S state]
  l2_lines_out.any                                  
       [L2 lines evicted]
  l2_lines_out.demand_clean                         
       [L2 lines evicted by a demand request]
  l2_lines_out.demand_dirty                         
       [L2 modified lines evicted by a demand request]
  l2_lines_out.prefetch_clean                       
       [L2 lines evicted by a prefetch request]
  l2_lines_out.prefetch_dirty                       
       [L2 modified lines evicted by a prefetch request]
  l2_rqsts.ifetch_hit                               
       [L2 instruction fetch hits]
  l2_rqsts.ifetch_miss                              
       [L2 instruction fetch misses]
  l2_rqsts.ifetches                                 
       [L2 instruction fetches]
  l2_rqsts.ld_hit                                   
       [L2 load hits]
  l2_rqsts.ld_miss                                  
       [L2 load misses]
  l2_rqsts.loads                                    
       [L2 requests]
  l2_rqsts.miss                                     
       [All L2 misses]
  l2_rqsts.prefetch_hit                             
       [L2 prefetch hits]
  l2_rqsts.prefetch_miss                            
       [L2 prefetch misses]
  l2_rqsts.prefetches                               
       [All L2 prefetches]
  l2_rqsts.references                               
       [All L2 requests]
  l2_rqsts.rfo_hit                                  
       [L2 RFO hits]
  l2_rqsts.rfo_miss                                 
       [L2 RFO misses]
  l2_rqsts.rfos                                     
       [L2 RFO requests]
  l2_transactions.any                               
       [All L2 transactions]
  l2_transactions.fill                              
       [L2 fill transactions]
  l2_transactions.ifetch                            
       [L2 instruction fetch transactions]
  l2_transactions.l1d_wb                            
       [L1D writeback to L2 transactions]
  l2_transactions.load                              
       [L2 Load transactions]
  l2_transactions.prefetch                          
       [L2 prefetch transactions]
  l2_transactions.rfo                               
       [L2 RFO transactions]
  l2_transactions.wb                                
       [L2 writeback to LLC transactions]
  l2_write.lock.e_state                             
       [L2 demand lock RFOs in E state]
  l2_write.lock.hit                                 
       [All demand L2 lock RFOs that hit the cache]
  l2_write.lock.i_state                             
       [L2 demand lock RFOs in I state (misses)]
  l2_write.lock.m_state                             
       [L2 demand lock RFOs in M state]
  l2_write.lock.mesi                                
       [All demand L2 lock RFOs]
  l2_write.lock.s_state                             
       [L2 demand lock RFOs in S state]
  l2_write.rfo.hit                                  
       [All L2 demand store RFOs that hit the cache]
  l2_write.rfo.i_state                              
       [L2 demand store RFOs in I state (misses)]
  l2_write.rfo.m_state                              
       [L2 demand store RFOs in M state]
  l2_write.rfo.mesi                                 
       [All L2 demand store RFOs]
  l2_write.rfo.s_state                              
       [L2 demand store RFOs in S state]
  longest_lat_cache.miss                            
       [Longest latency cache miss]
  longest_lat_cache.reference                       
       [Longest latency cache reference]
  mem_inst_retired.latency_above_threshold_0        
       [Memory instructions retired above 0 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_1024     
       [Memory instructions retired above 1024 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_128      
       [Memory instructions retired above 128 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_16       
       [Memory instructions retired above 16 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_16384    
       [Memory instructions retired above 16384 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_2048     
       [Memory instructions retired above 2048 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_256      
       [Memory instructions retired above 256 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_32       
       [Memory instructions retired above 32 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_32768    
       [Memory instructions retired above 32768 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_4        
       [Memory instructions retired above 4 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_4096     
       [Memory instructions retired above 4096 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_512      
       [Memory instructions retired above 512 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_64       
       [Memory instructions retired above 64 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_8        
       [Memory instructions retired above 8 clocks (Precise Event)]
  mem_inst_retired.latency_above_threshold_8192     
       [Memory instructions retired above 8192 clocks (Precise Event)]
  mem_inst_retired.loads                            
       [Instructions retired which contains a load (Precise Event)]
  mem_inst_retired.stores                           
       [Instructions retired which contains a store (Precise Event)]
  mem_load_retired.hit_lfb                          
       [Retired loads that miss L1D and hit an previously allocated LFB
        (Precise Event)]
  mem_load_retired.l1d_hit                          
       [Retired loads that hit the L1 data cache (Precise Event)]
  mem_load_retired.l2_hit                           
       [Retired loads that hit the L2 cache (Precise Event)]
  mem_load_retired.llc_miss                         
       [Retired loads that miss the LLC cache (Precise Event)]
  mem_load_retired.llc_unshared_hit                 
       [Retired loads that hit valid versions in the LLC cache (Precise Event)]
  mem_load_retired.other_core_l2_hit_hitm           
       [Retired loads that hit sibling core's L2 in modified or unmodified
        states (Precise Event)]
  offcore_requests.any                              
       [All offcore requests]
  offcore_requests.any.read                         
       [Offcore read requests]
  offcore_requests.any.rfo                          
       [Offcore RFO requests]
  offcore_requests.demand.read_code                 
       [Offcore demand code read requests]
  offcore_requests.demand.read_data                 
       [Offcore demand data read requests]
  offcore_requests.demand.rfo                       
       [Offcore demand RFO requests]
  offcore_requests.l1d_writeback                    
       [Offcore L1 data cache writebacks]
  offcore_requests_outstanding.any.read             
       [Outstanding offcore reads]
  offcore_requests_outstanding.any.read_not_empty   
       [Cycles offcore reads busy]
  offcore_requests_outstanding.demand.read_code     
       [Outstanding offcore demand code reads]
  offcore_requests_outstanding.demand.read_code_not_empty
       [Cycles offcore demand code read busy]
  offcore_requests_outstanding.demand.read_data     
       [Outstanding offcore demand data reads]
  offcore_requests_outstanding.demand.read_data_not_empty
       [Cycles offcore demand data read busy]
  offcore_requests_outstanding.demand.rfo           
       [Outstanding offcore demand RFOs]
  offcore_requests_outstanding.demand.rfo_not_empty 
       [Cycles offcore demand RFOs busy]
  offcore_requests_sq_full                          
       [Offcore requests blocked due to Super Queue full]
  offcore_response.any_data.all_local_dram_and_remote_cache_hit
       [REQUEST = ANY_DATA read and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.any_data.any_cache_dram          
       [REQUEST = ANY_DATA read and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.any_data.any_location            
       [REQUEST = ANY_DATA read and RESPONSE = ANY_LOCATION]
  offcore_response.any_data.io_csr_mmio             
       [REQUEST = ANY_DATA read and RESPONSE = IO_CSR_MMIO]
  offcore_response.any_data.llc_hit_no_other_core   
       [REQUEST = ANY_DATA read and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.any_data.llc_hit_other_core_hit  
       [REQUEST = ANY_DATA read and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.any_data.llc_hit_other_core_hitm 
       [REQUEST = ANY_DATA read and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.any_data.local_cache             
       [REQUEST = ANY_DATA read and RESPONSE = LOCAL_CACHE]
  offcore_response.any_data.local_dram_and_remote_cache_hit
       [REQUEST = ANY_DATA read and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.any_data.remote_cache_hitm       
       [REQUEST = ANY_DATA read and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.any_ifetch.all_local_dram_and_remote_cache_hit
       [REQUEST = ANY IFETCH and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.any_ifetch.any_cache_dram        
       [REQUEST = ANY IFETCH and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.any_ifetch.any_location          
       [REQUEST = ANY IFETCH and RESPONSE = ANY_LOCATION]
  offcore_response.any_ifetch.io_csr_mmio           
       [REQUEST = ANY IFETCH and RESPONSE = IO_CSR_MMIO]
  offcore_response.any_ifetch.llc_hit_no_other_core 
       [REQUEST = ANY IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.any_ifetch.llc_hit_other_core_hit
       [REQUEST = ANY IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.any_ifetch.llc_hit_other_core_hitm
       [REQUEST = ANY IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.any_ifetch.local_cache           
       [REQUEST = ANY IFETCH and RESPONSE = LOCAL_CACHE]
  offcore_response.any_ifetch.local_dram_and_remote_cache_hit
       [REQUEST = ANY IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.any_ifetch.remote_cache_hitm     
       [REQUEST = ANY IFETCH and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.any_request.all_local_dram_and_remote_cache_hit
       [REQUEST = ANY_REQUEST and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.any_request.any_cache_dram       
       [REQUEST = ANY_REQUEST and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.any_request.any_location         
       [REQUEST = ANY_REQUEST and RESPONSE = ANY_LOCATION]
  offcore_response.any_request.io_csr_mmio          
       [REQUEST = ANY_REQUEST and RESPONSE = IO_CSR_MMIO]
  offcore_response.any_request.llc_hit_no_other_core
       [REQUEST = ANY_REQUEST and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.any_request.llc_hit_other_core_hit
       [REQUEST = ANY_REQUEST and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.any_request.llc_hit_other_core_hitm
       [REQUEST = ANY_REQUEST and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.any_request.local_cache          
       [REQUEST = ANY_REQUEST and RESPONSE = LOCAL_CACHE]
  offcore_response.any_request.local_dram_and_remote_cache_hit
       [REQUEST = ANY_REQUEST and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.any_request.remote_cache_hitm    
       [REQUEST = ANY_REQUEST and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.any_rfo.all_local_dram_and_remote_cache_hit
       [REQUEST = ANY RFO and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.any_rfo.any_cache_dram           
       [REQUEST = ANY RFO and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.any_rfo.any_location             
       [REQUEST = ANY RFO and RESPONSE = ANY_LOCATION]
  offcore_response.any_rfo.io_csr_mmio              
       [REQUEST = ANY RFO and RESPONSE = IO_CSR_MMIO]
  offcore_response.any_rfo.llc_hit_no_other_core    
       [REQUEST = ANY RFO and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.any_rfo.llc_hit_other_core_hit   
       [REQUEST = ANY RFO and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.any_rfo.llc_hit_other_core_hitm  
       [REQUEST = ANY RFO and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.any_rfo.local_cache              
       [REQUEST = ANY RFO and RESPONSE = LOCAL_CACHE]
  offcore_response.any_rfo.local_dram_and_remote_cache_hit
       [REQUEST = ANY RFO and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.any_rfo.remote_cache_hitm        
       [REQUEST = ANY RFO and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.corewb.all_local_dram_and_remote_cache_hit
       [REQUEST = CORE_WB and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.corewb.any_cache_dram            
       [REQUEST = CORE_WB and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.corewb.any_location              
       [REQUEST = CORE_WB and RESPONSE = ANY_LOCATION]
  offcore_response.corewb.io_csr_mmio               
       [REQUEST = CORE_WB and RESPONSE = IO_CSR_MMIO]
  offcore_response.corewb.llc_hit_no_other_core     
       [REQUEST = CORE_WB and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.corewb.llc_hit_other_core_hit    
       [REQUEST = CORE_WB and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.corewb.llc_hit_other_core_hitm   
       [REQUEST = CORE_WB and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.corewb.local_cache               
       [REQUEST = CORE_WB and RESPONSE = LOCAL_CACHE]
  offcore_response.corewb.local_dram_and_remote_cache_hit
       [REQUEST = CORE_WB and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.corewb.remote_cache_hitm         
       [REQUEST = CORE_WB and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.data_ifetch.all_local_dram_and_remote_cache_hit
       [REQUEST = DATA_IFETCH and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.data_ifetch.any_cache_dram       
       [REQUEST = DATA_IFETCH and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.data_ifetch.any_location         
       [REQUEST = DATA_IFETCH and RESPONSE = ANY_LOCATION]
  offcore_response.data_ifetch.io_csr_mmio          
       [REQUEST = DATA_IFETCH and RESPONSE = IO_CSR_MMIO]
  offcore_response.data_ifetch.llc_hit_no_other_core
       [REQUEST = DATA_IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.data_ifetch.llc_hit_other_core_hit
       [REQUEST = DATA_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.data_ifetch.llc_hit_other_core_hitm
       [REQUEST = DATA_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.data_ifetch.local_cache          
       [REQUEST = DATA_IFETCH and RESPONSE = LOCAL_CACHE]
  offcore_response.data_ifetch.local_dram_and_remote_cache_hit
       [REQUEST = DATA_IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.data_ifetch.remote_cache_hitm    
       [REQUEST = DATA_IFETCH and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.data_in.all_local_dram_and_remote_cache_hit
       [REQUEST = DATA_IN and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.data_in.any_cache_dram           
       [REQUEST = DATA_IN and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.data_in.any_location             
       [REQUEST = DATA_IN and RESPONSE = ANY_LOCATION]
  offcore_response.data_in.io_csr_mmio              
       [REQUEST = DATA_IN and RESPONSE = IO_CSR_MMIO]
  offcore_response.data_in.llc_hit_no_other_core    
       [REQUEST = DATA_IN and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.data_in.llc_hit_other_core_hit   
       [REQUEST = DATA_IN and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.data_in.llc_hit_other_core_hitm  
       [REQUEST = DATA_IN and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.data_in.local_cache              
       [REQUEST = DATA_IN and RESPONSE = LOCAL_CACHE]
  offcore_response.data_in.local_dram_and_remote_cache_hit
       [REQUEST = DATA_IN and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.data_in.remote_cache_hitm        
       [REQUEST = DATA_IN and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.demand_data.all_local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_DATA and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.demand_data.any_cache_dram       
       [REQUEST = DEMAND_DATA and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.demand_data.any_location         
       [REQUEST = DEMAND_DATA and RESPONSE = ANY_LOCATION]
  offcore_response.demand_data.io_csr_mmio          
       [REQUEST = DEMAND_DATA and RESPONSE = IO_CSR_MMIO]
  offcore_response.demand_data.llc_hit_no_other_core
       [REQUEST = DEMAND_DATA and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.demand_data.llc_hit_other_core_hit
       [REQUEST = DEMAND_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.demand_data.llc_hit_other_core_hitm
       [REQUEST = DEMAND_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.demand_data.local_cache          
       [REQUEST = DEMAND_DATA and RESPONSE = LOCAL_CACHE]
  offcore_response.demand_data.local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_DATA and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.demand_data.remote_cache_hitm    
       [REQUEST = DEMAND_DATA and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.demand_data_rd.all_local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_DATA_RD and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.demand_data_rd.any_cache_dram    
       [REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.demand_data_rd.any_location      
       [REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_LOCATION]
  offcore_response.demand_data_rd.io_csr_mmio       
       [REQUEST = DEMAND_DATA_RD and RESPONSE = IO_CSR_MMIO]
  offcore_response.demand_data_rd.llc_hit_no_other_core
       [REQUEST = DEMAND_DATA_RD and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.demand_data_rd.llc_hit_other_core_hit
       [REQUEST = DEMAND_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.demand_data_rd.llc_hit_other_core_hitm
       [REQUEST = DEMAND_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.demand_data_rd.local_cache       
       [REQUEST = DEMAND_DATA_RD and RESPONSE = LOCAL_CACHE]
  offcore_response.demand_data_rd.local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_DATA_RD and RESPONSE = LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.demand_data_rd.remote_cache_hitm 
       [REQUEST = DEMAND_DATA_RD and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.demand_ifetch.all_local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_IFETCH and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.demand_ifetch.any_cache_dram     
       [REQUEST = DEMAND_IFETCH and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.demand_ifetch.any_location       
       [REQUEST = DEMAND_IFETCH and RESPONSE = ANY_LOCATION]
  offcore_response.demand_ifetch.io_csr_mmio        
       [REQUEST = DEMAND_IFETCH and RESPONSE = IO_CSR_MMIO]
  offcore_response.demand_ifetch.llc_hit_no_other_core
       [REQUEST = DEMAND_IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.demand_ifetch.llc_hit_other_core_hit
       [REQUEST = DEMAND_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.demand_ifetch.llc_hit_other_core_hitm
       [REQUEST = DEMAND_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.demand_ifetch.local_cache        
       [REQUEST = DEMAND_IFETCH and RESPONSE = LOCAL_CACHE]
  offcore_response.demand_ifetch.local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.demand_ifetch.remote_cache_hitm  
       [REQUEST = DEMAND_IFETCH and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.demand_rfo.all_local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_RFO and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.demand_rfo.any_cache_dram        
       [REQUEST = DEMAND_RFO and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.demand_rfo.any_location          
       [REQUEST = DEMAND_RFO and RESPONSE = ANY_LOCATION]
  offcore_response.demand_rfo.io_csr_mmio           
       [REQUEST = DEMAND_RFO and RESPONSE = IO_CSR_MMIO]
  offcore_response.demand_rfo.llc_hit_no_other_core 
       [REQUEST = DEMAND_RFO and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.demand_rfo.llc_hit_other_core_hit
       [REQUEST = DEMAND_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.demand_rfo.llc_hit_other_core_hitm
       [REQUEST = DEMAND_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.demand_rfo.local_cache           
       [REQUEST = DEMAND_RFO and RESPONSE = LOCAL_CACHE]
  offcore_response.demand_rfo.local_dram_and_remote_cache_hit
       [REQUEST = DEMAND_RFO and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.demand_rfo.remote_cache_hitm     
       [REQUEST = DEMAND_RFO and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.other.all_local_dram_and_remote_cache_hit
       [REQUEST = OTHER and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.other.any_cache_dram             
       [REQUEST = OTHER and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.other.any_location               
       [REQUEST = OTHER and RESPONSE = ANY_LOCATION]
  offcore_response.other.io_csr_mmio                
       [REQUEST = OTHER and RESPONSE = IO_CSR_MMIO]
  offcore_response.other.llc_hit_no_other_core      
       [REQUEST = OTHER and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.other.llc_hit_other_core_hit     
       [REQUEST = OTHER and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.other.llc_hit_other_core_hitm    
       [REQUEST = OTHER and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.other.local_cache                
       [REQUEST = OTHER and RESPONSE = LOCAL_CACHE]
  offcore_response.other.local_dram_and_remote_cache_hit
       [REQUEST = OTHER and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.other.remote_cache_hitm          
       [REQUEST = OTHER and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.pf_data.all_local_dram_and_remote_cache_hit
       [REQUEST = PF_DATA and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.pf_data.any_cache_dram           
       [REQUEST = PF_DATA and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.pf_data.any_location             
       [REQUEST = PF_DATA and RESPONSE = ANY_LOCATION]
  offcore_response.pf_data.io_csr_mmio              
       [REQUEST = PF_DATA and RESPONSE = IO_CSR_MMIO]
  offcore_response.pf_data.llc_hit_no_other_core    
       [REQUEST = PF_DATA and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.pf_data.llc_hit_other_core_hit   
       [REQUEST = PF_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.pf_data.llc_hit_other_core_hitm  
       [REQUEST = PF_DATA and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.pf_data.local_cache              
       [REQUEST = PF_DATA and RESPONSE = LOCAL_CACHE]
  offcore_response.pf_data.local_dram_and_remote_cache_hit
       [REQUEST = PF_DATA and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.pf_data.remote_cache_hitm        
       [REQUEST = PF_DATA and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.pf_data_rd.all_local_dram_and_remote_cache_hit
       [REQUEST = PF_DATA_RD and RESPONSE = ALL_LOCAL_DRAM AND
        REMOTE_CACHE_HIT]
  offcore_response.pf_data_rd.any_cache_dram        
       [REQUEST = PF_DATA_RD and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.pf_data_rd.any_location          
       [REQUEST = PF_DATA_RD and RESPONSE = ANY_LOCATION]
  offcore_response.pf_data_rd.io_csr_mmio           
       [REQUEST = PF_DATA_RD and RESPONSE = IO_CSR_MMIO]
  offcore_response.pf_data_rd.llc_hit_no_other_core 
       [REQUEST = PF_DATA_RD and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.pf_data_rd.llc_hit_other_core_hit
       [REQUEST = PF_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.pf_data_rd.llc_hit_other_core_hitm
       [REQUEST = PF_DATA_RD and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.pf_data_rd.local_cache           
       [REQUEST = PF_DATA_RD and RESPONSE = LOCAL_CACHE]
  offcore_response.pf_data_rd.local_dram_and_remote_cache_hit
       [REQUEST = PF_DATA_RD and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.pf_data_rd.remote_cache_hitm     
       [REQUEST = PF_DATA_RD and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.pf_ifetch.all_local_dram_and_remote_cache_hit
       [REQUEST = PF_RFO and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.pf_ifetch.any_cache_dram         
       [REQUEST = PF_RFO and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.pf_ifetch.any_location           
       [REQUEST = PF_RFO and RESPONSE = ANY_LOCATION]
  offcore_response.pf_ifetch.io_csr_mmio            
       [REQUEST = PF_RFO and RESPONSE = IO_CSR_MMIO]
  offcore_response.pf_ifetch.llc_hit_no_other_core  
       [REQUEST = PF_RFO and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.pf_ifetch.llc_hit_other_core_hit 
       [REQUEST = PF_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.pf_ifetch.llc_hit_other_core_hitm
       [REQUEST = PF_RFO and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.pf_ifetch.local_cache            
       [REQUEST = PF_RFO and RESPONSE = LOCAL_CACHE]
  offcore_response.pf_ifetch.local_dram_and_remote_cache_hit
       [REQUEST = PF_RFO and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.pf_ifetch.remote_cache_hitm      
       [REQUEST = PF_RFO and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.pf_rfo.all_local_dram_and_remote_cache_hit
       [REQUEST = PF_IFETCH and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.pf_rfo.any_cache_dram            
       [REQUEST = PF_IFETCH and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.pf_rfo.any_location              
       [REQUEST = PF_IFETCH and RESPONSE = ANY_LOCATION]
  offcore_response.pf_rfo.io_csr_mmio               
       [REQUEST = PF_IFETCH and RESPONSE = IO_CSR_MMIO]
  offcore_response.pf_rfo.llc_hit_no_other_core     
       [REQUEST = PF_IFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.pf_rfo.llc_hit_other_core_hit    
       [REQUEST = PF_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.pf_rfo.llc_hit_other_core_hitm   
       [REQUEST = PF_IFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.pf_rfo.local_cache               
       [REQUEST = PF_IFETCH and RESPONSE = LOCAL_CACHE]
  offcore_response.pf_rfo.local_dram_and_remote_cache_hit
       [REQUEST = PF_IFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.pf_rfo.remote_cache_hitm         
       [REQUEST = PF_IFETCH and RESPONSE = REMOTE_CACHE_HITM]
  offcore_response.prefetch.all_local_dram_and_remote_cache_hit
       [REQUEST = PREFETCH and RESPONSE = ALL_LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.prefetch.any_cache_dram          
       [REQUEST = PREFETCH and RESPONSE = ANY_CACHE_DRAM]
  offcore_response.prefetch.any_location            
       [REQUEST = PREFETCH and RESPONSE = ANY_LOCATION]
  offcore_response.prefetch.io_csr_mmio             
       [REQUEST = PREFETCH and RESPONSE = IO_CSR_MMIO]
  offcore_response.prefetch.llc_hit_no_other_core   
       [REQUEST = PREFETCH and RESPONSE = LLC_HIT_NO_OTHER_CORE]
  offcore_response.prefetch.llc_hit_other_core_hit  
       [REQUEST = PREFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HIT]
  offcore_response.prefetch.llc_hit_other_core_hitm 
       [REQUEST = PREFETCH and RESPONSE = LLC_HIT_OTHER_CORE_HITM]
  offcore_response.prefetch.local_cache             
       [REQUEST = PREFETCH and RESPONSE = LOCAL_CACHE]
  offcore_response.prefetch.local_dram_and_remote_cache_hit
       [REQUEST = PREFETCH and RESPONSE = LOCAL_DRAM AND REMOTE_CACHE_HIT]
  offcore_response.prefetch.remote_cache_hitm       
       [REQUEST = PREFETCH and RESPONSE = REMOTE_CACHE_HITM]
  sq_misc.lru_hints                                 
       [Super Queue LRU hints sent to LLC]
  sq_misc.split_lock                                
       [Super Queue lock splits across a cache line]
  store_blocks.at_ret                               
       [Loads delayed with at-Retirement block code]
  store_blocks.l1d_block                            
       [Cacheable loads delayed with L1D block code]

floating point:
  fp_assist.all                                     
       [X87 Floating point assists (Precise Event)]
  fp_assist.input                                   
       [X87 Floating poiint assists for invalid input value (Precise Event)]
  fp_assist.output                                  
       [X87 Floating point assists for invalid output value (Precise Event)]
  fp_comp_ops_exe.mmx                               
       [MMX Uops]
  fp_comp_ops_exe.sse2_integer                      
       [SSE2 integer Uops]
  fp_comp_ops_exe.sse_double_precision              
       [SSE* FP double precision Uops]
  fp_comp_ops_exe.sse_fp                            
       [SSE and SSE2 FP Uops]
  fp_comp_ops_exe.sse_fp_packed                     
       [SSE FP packed Uops]
  fp_comp_ops_exe.sse_fp_scalar                     
       [SSE FP scalar Uops]
  fp_comp_ops_exe.sse_single_precision              
       [SSE* FP single precision Uops]
  fp_comp_ops_exe.x87                               
       [Computational floating-point operations executed]
  fp_mmx_trans.any                                  
       [All Floating Point to and from MMX transitions]
  fp_mmx_trans.to_fp                                
       [Transitions from MMX to Floating Point instructions]
  fp_mmx_trans.to_mmx                               
       [Transitions from Floating Point to MMX instructions]
  simd_int_128.pack                                 
       [128 bit SIMD integer pack operations]
  simd_int_128.packed_arith                         
       [128 bit SIMD integer arithmetic operations]
  simd_int_128.packed_logical                       
       [128 bit SIMD integer logical operations]
  simd_int_128.packed_mpy                           
       [128 bit SIMD integer multiply operations]
  simd_int_128.packed_shift                         
       [128 bit SIMD integer shift operations]
  simd_int_128.shuffle_move                         
       [128 bit SIMD integer shuffle/move operations]
  simd_int_128.unpack                               
       [128 bit SIMD integer unpack operations]
  simd_int_64.pack                                  
       [SIMD integer 64 bit pack operations]
  simd_int_64.packed_arith                          
       [SIMD integer 64 bit arithmetic operations]
  simd_int_64.packed_logical                        
       [SIMD integer 64 bit logical operations]
  simd_int_64.packed_mpy                            
       [SIMD integer 64 bit packed multiply operations]
  simd_int_64.packed_shift                          
       [SIMD integer 64 bit shift operations]
  simd_int_64.shuffle_move                          
       [SIMD integer 64 bit shuffle/move operations]
  simd_int_64.unpack                                
       [SIMD integer 64 bit unpack operations]

frontend:
  macro_insts.decoded                               
       [Instructions decoded]
  macro_insts.fusions_decoded                       
       [Macro-fused instructions decoded]
  two_uop_insts_decoded                             
       [Two Uop instructions decoded]

memory:
  misalign_mem_ref.store                            
       [Misaligned store references]
  offcore_response.any_data.any_dram_and_remote_fwd 
       [REQUEST = ANY_DATA read and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.any_data.any_llc_miss            
       [REQUEST = ANY_DATA read and RESPONSE = ANY_LLC_MISS]
  offcore_response.any_data.other_local_dram        
       [REQUEST = ANY_DATA read and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.any_data.remote_dram             
       [REQUEST = ANY_DATA read and RESPONSE = REMOTE_DRAM]
  offcore_response.any_ifetch.any_dram_and_remote_fwd
       [REQUEST = ANY IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.any_ifetch.any_llc_miss          
       [REQUEST = ANY IFETCH and RESPONSE = ANY_LLC_MISS]
  offcore_response.any_ifetch.other_local_dram      
       [REQUEST = ANY IFETCH and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.any_ifetch.remote_dram           
       [REQUEST = ANY IFETCH and RESPONSE = REMOTE_DRAM]
  offcore_response.any_request.any_dram_and_remote_fwd
       [REQUEST = ANY_REQUEST and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.any_request.any_llc_miss         
       [REQUEST = ANY_REQUEST and RESPONSE = ANY_LLC_MISS]
  offcore_response.any_request.other_local_dram     
       [REQUEST = ANY_REQUEST and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.any_request.remote_dram          
       [REQUEST = ANY_REQUEST and RESPONSE = REMOTE_DRAM]
  offcore_response.any_rfo.any_dram_and_remote_fwd  
       [REQUEST = ANY RFO and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.any_rfo.any_llc_miss             
       [REQUEST = ANY RFO and RESPONSE = ANY_LLC_MISS]
  offcore_response.any_rfo.other_local_dram         
       [REQUEST = ANY RFO and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.any_rfo.remote_dram              
       [REQUEST = ANY RFO and RESPONSE = REMOTE_DRAM]
  offcore_response.corewb.any_dram_and_remote_fwd   
       [REQUEST = CORE_WB and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.corewb.any_llc_miss              
       [REQUEST = CORE_WB and RESPONSE = ANY_LLC_MISS]
  offcore_response.corewb.other_local_dram          
       [REQUEST = CORE_WB and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.corewb.remote_dram               
       [REQUEST = CORE_WB and RESPONSE = REMOTE_DRAM]
  offcore_response.data_ifetch.any_dram_and_remote_fwd
       [REQUEST = DATA_IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.data_ifetch.any_llc_miss         
       [REQUEST = DATA_IFETCH and RESPONSE = ANY_LLC_MISS]
  offcore_response.data_ifetch.other_local_dram     
       [REQUEST = DATA_IFETCH and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.data_ifetch.remote_dram          
       [REQUEST = DATA_IFETCH and RESPONSE = REMOTE_DRAM]
  offcore_response.data_in.any_dram_and_remote_fwd  
       [REQUEST = DATA_IN and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.data_in.any_llc_miss             
       [REQUEST = DATA_IN and RESPONSE = ANY_LLC_MISS]
  offcore_response.data_in.other_local_dram         
       [REQUEST = DATA_IN and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.data_in.remote_dram              
       [REQUEST = DATA_IN and RESPONSE = REMOTE_DRAM]
  offcore_response.demand_data.any_dram_and_remote_fwd
       [REQUEST = DEMAND_DATA and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.demand_data.any_llc_miss         
       [REQUEST = DEMAND_DATA and RESPONSE = ANY_LLC_MISS]
  offcore_response.demand_data.other_local_dram     
       [REQUEST = DEMAND_DATA and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.demand_data.remote_dram          
       [REQUEST = DEMAND_DATA and RESPONSE = REMOTE_DRAM]
  offcore_response.demand_data_rd.any_dram_and_remote_fwd
       [REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.demand_data_rd.any_llc_miss      
       [REQUEST = DEMAND_DATA_RD and RESPONSE = ANY_LLC_MISS]
  offcore_response.demand_data_rd.other_local_dram  
       [REQUEST = DEMAND_DATA_RD and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.demand_data_rd.remote_dram       
       [REQUEST = DEMAND_DATA_RD and RESPONSE = REMOTE_DRAM]
  offcore_response.demand_ifetch.any_dram_and_remote_fwd
       [REQUEST = DEMAND_IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.demand_ifetch.any_llc_miss       
       [REQUEST = DEMAND_IFETCH and RESPONSE = ANY_LLC_MISS]
  offcore_response.demand_ifetch.other_local_dram   
       [REQUEST = DEMAND_IFETCH and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.demand_ifetch.remote_dram        
       [REQUEST = DEMAND_IFETCH and RESPONSE = REMOTE_DRAM]
  offcore_response.demand_rfo.any_dram_and_remote_fwd
       [REQUEST = DEMAND_RFO and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.demand_rfo.any_llc_miss          
       [REQUEST = DEMAND_RFO and RESPONSE = ANY_LLC_MISS]
  offcore_response.demand_rfo.other_local_dram      
       [REQUEST = DEMAND_RFO and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.demand_rfo.remote_dram           
       [REQUEST = DEMAND_RFO and RESPONSE = REMOTE_DRAM]
  offcore_response.other.any_dram_and_remote_fwd    
       [REQUEST = OTHER and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.other.any_llc_miss               
       [REQUEST = OTHER and RESPONSE = ANY_LLC_MISS]
  offcore_response.other.other_local_dram           
       [REQUEST = OTHER and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.other.remote_dram                
       [REQUEST = OTHER and RESPONSE = REMOTE_DRAM]
  offcore_response.pf_data.any_dram_and_remote_fwd  
       [REQUEST = PF_DATA and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.pf_data.any_llc_miss             
       [REQUEST = PF_DATA and RESPONSE = ANY_LLC_MISS]
  offcore_response.pf_data.other_local_dram         
       [REQUEST = PF_DATA and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.pf_data.remote_dram              
       [REQUEST = PF_DATA and RESPONSE = REMOTE_DRAM]
  offcore_response.pf_data_rd.any_dram_and_remote_fwd
       [REQUEST = PF_DATA_RD and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.pf_data_rd.any_llc_miss          
       [REQUEST = PF_DATA_RD and RESPONSE = ANY_LLC_MISS]
  offcore_response.pf_data_rd.other_local_dram      
       [REQUEST = PF_DATA_RD and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.pf_data_rd.remote_dram           
       [REQUEST = PF_DATA_RD and RESPONSE = REMOTE_DRAM]
  offcore_response.pf_ifetch.any_dram_and_remote_fwd
       [REQUEST = PF_RFO and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.pf_ifetch.any_llc_miss           
       [REQUEST = PF_RFO and RESPONSE = ANY_LLC_MISS]
  offcore_response.pf_ifetch.other_local_dram       
       [REQUEST = PF_RFO and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.pf_ifetch.remote_dram            
       [REQUEST = PF_RFO and RESPONSE = REMOTE_DRAM]
  offcore_response.pf_rfo.any_dram_and_remote_fwd   
       [REQUEST = PF_IFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.pf_rfo.any_llc_miss              
       [REQUEST = PF_IFETCH and RESPONSE = ANY_LLC_MISS]
  offcore_response.pf_rfo.other_local_dram          
       [REQUEST = PF_IFETCH and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.pf_rfo.remote_dram               
       [REQUEST = PF_IFETCH and RESPONSE = REMOTE_DRAM]
  offcore_response.prefetch.any_dram_and_remote_fwd 
       [REQUEST = PREFETCH and RESPONSE = ANY_DRAM AND REMOTE_FWD]
  offcore_response.prefetch.any_llc_miss            
       [REQUEST = PREFETCH and RESPONSE = ANY_LLC_MISS]
  offcore_response.prefetch.other_local_dram        
       [REQUEST = PREFETCH and RESPONSE = OTHER_LOCAL_DRAM]
  offcore_response.prefetch.remote_dram             
       [REQUEST = PREFETCH and RESPONSE = REMOTE_DRAM]

other:
  bpu_clears.early                                  
       [Early Branch Prediciton Unit clears]
  bpu_clears.late                                   
       [Late Branch Prediction Unit clears]
  bpu_missed_call_ret                               
       [Branch prediction unit missed call or return]
  es_reg_renames                                    
       [ES segment renames]
  io_transactions                                   
       [I/O transactions]
  l1i.cycles_stalled                                
       [L1I instruction fetch stall cycles]
  l1i.hits                                          
       [L1I instruction fetch hits]
  l1i.misses                                        
       [L1I instruction fetch misses]
  l1i.reads                                         
       [L1I Instruction fetches]
  large_itlb.hit                                    
       [Large ITLB hit]
  load_block.overlap_store                          
       [Loads that partially overlap an earlier store]
  load_dispatch.any                                 
       [All loads dispatched]
  load_dispatch.mob                                 
       [Loads dispatched from the MOB]
  load_dispatch.rs                                  
       [Loads dispatched that bypass the MOB]
  load_dispatch.rs_delayed                          
       [Loads dispatched from stage 305]
  partial_address_alias                             
       [False dependencies due to partial address aliasing]
  rat_stalls.any                                    
       [All RAT stall cycles]
  rat_stalls.flags                                  
       [Flag stall cycles]
  rat_stalls.registers                              
       [Partial register stall cycles]
  rat_stalls.rob_read_port                          
       [ROB read port stalls cycles]
  rat_stalls.scoreboard                             
       [Scoreboard stall cycles]
  sb_drain.any                                      
       [All Store buffer stall cycles]
  seg_rename_stalls                                 
       [Segment rename stall cycles]
  snoop_response.hit                                
       [Thread responded HIT to snoop]
  snoop_response.hite                               
       [Thread responded HITE to snoop]
  snoop_response.hitm                               
       [Thread responded HITM to snoop]
  snoopq_requests.code                              
       [Snoop code requests]
  snoopq_requests.data                              
       [Snoop data requests]
  snoopq_requests.invalidate                        
       [Snoop invalidate requests]
  snoopq_requests_outstanding.code                  
       [Outstanding snoop code requests]
  snoopq_requests_outstanding.code_not_empty        
       [Cycles snoop code requests queued]
  snoopq_requests_outstanding.data                  
       [Outstanding snoop data requests]
  snoopq_requests_outstanding.data_not_empty        
       [Cycles snoop data requests queued]
  snoopq_requests_outstanding.invalidate            
       [Outstanding snoop invalidate requests]
  snoopq_requests_outstanding.invalidate_not_empty  
       [Cycles snoop invalidate requests queued]
  sq_full_stall_cycles                              
       [Super Queue full stall cycles]

pipeline:
  arith.cycles_div_busy                             
       [Cycles the divider is busy]
  arith.div                                         
       [Divide Operations executed]
  arith.mul                                         
       [Multiply operations executed]
  baclear.bad_target                                
       [BACLEAR asserted with bad target address]
  baclear.clear                                     
       [BACLEAR asserted, regardless of cause]
  baclear_force_iq                                  
       [Instruction queue forced BACLEAR]
  br_inst_decoded                                   
       [Branch instructions decoded]
  br_inst_exec.any                                  
       [Branch instructions executed]
  br_inst_exec.cond                                 
       [Conditional branch instructions executed]
  br_inst_exec.direct                               
       [Unconditional branches executed]
  br_inst_exec.direct_near_call                     
       [Unconditional call branches executed]
  br_inst_exec.indirect_near_call                   
       [Indirect call branches executed]
  br_inst_exec.indirect_non_call                    
       [Indirect non call branches executed]
  br_inst_exec.near_calls                           
       [Call branches executed]
  br_inst_exec.non_calls                            
       [All non call branches executed]
  br_inst_exec.return_near                          
       [Indirect return branches executed]
  br_inst_exec.taken                                
       [Taken branches executed]
  br_inst_retired.all_branches                      
       [Retired branch instructions (Precise Event)]
  br_inst_retired.conditional                       
       [Retired conditional branch instructions (Precise Event)]
  br_inst_retired.near_call                         
       [Retired near call instructions (Precise Event)]
  br_misp_exec.any                                  
       [Mispredicted branches executed]
  br_misp_exec.cond                                 
       [Mispredicted conditional branches executed]
  br_misp_exec.direct                               
       [Mispredicted unconditional branches executed]
  br_misp_exec.direct_near_call                     
       [Mispredicted non call branches executed]
  br_misp_exec.indirect_near_call                   
       [Mispredicted indirect call branches executed]
  br_misp_exec.indirect_non_call                    
       [Mispredicted indirect non call branches executed]
  br_misp_exec.near_calls                           
       [Mispredicted call branches executed]
  br_misp_exec.non_calls                            
       [Mispredicted non call branches executed]
  br_misp_exec.return_near                          
       [Mispredicted return branches executed]
  br_misp_exec.taken                                
       [Mispredicted taken branches executed]
  br_misp_retired.all_branches                      
       [Mispredicted retired branch instructions (Precise Event)]
  br_misp_retired.conditional                       
       [Mispredicted conditional retired branches (Precise Event)]
  br_misp_retired.near_call                         
       [Mispredicted near retired calls (Precise Event)]
  cpu_clk_unhalted.ref                              
       [Reference cycles when thread is not halted (fixed counter)]
  cpu_clk_unhalted.ref_p                            
       [Reference base clock (133 Mhz) cycles when thread is not halted
        (programmable counter)]
  cpu_clk_unhalted.thread                           
       [Cycles when thread is not halted (fixed counter)]
  cpu_clk_unhalted.thread_p                         
       [Cycles when thread is not halted (programmable counter)]
  cpu_clk_unhalted.total_cycles                     
       [Total CPU cycles]
  ild_stall.any                                     
       [Any Instruction Length Decoder stall cycles]
  ild_stall.iq_full                                 
       [Instruction Queue full stall cycles]
  ild_stall.lcp                                     
       [Length Change Prefix stall cycles]
  ild_stall.mru                                     
       [Stall cycles due to BPU MRU bypass]
  ild_stall.regen                                   
       [Regen stall cycles]
  inst_decoded.dec0                                 
       [Instructions that must be decoded by decoder 0]
  inst_queue_write_cycles                           
       [Cycles instructions are written to the instruction queue]
  inst_queue_writes                                 
       [Instructions written to instruction queue]
  inst_retired.any                                  
       [Instructions retired (fixed counter)]
  inst_retired.any_p                                
       [Instructions retired (Programmable counter and Precise Event) (Precise
        event)]
  inst_retired.mmx                                  
       [Retired MMX instructions (Precise Event)]
  inst_retired.total_cycles                         
       [Total cycles (Precise Event)]
  inst_retired.total_cycles_ps                      
       [Total cycles (Precise Event)]
  inst_retired.x87                                  
       [Retired floating-point operations (Precise Event)]
  load_hit_pre                                      
       [Load operations conflicting with software prefetches]
  lsd.active                                        
       [Cycles when uops were delivered by the LSD]
  lsd.inactive                                      
       [Cycles no uops were delivered by the LSD]
  lsd_overflow                                      
       [Loops that can't stream from the instruction queue]
  machine_clears.cycles                             
       [Cycles machine clear asserted]
  machine_clears.mem_order                          
       [Execution pipeline restart due to Memory ordering conflicts]
  machine_clears.smc                                
       [Self-Modifying Code detected]
  resource_stalls.any                               
       [Resource related stall cycles]
  resource_stalls.fpcw                              
       [FPU control word write stall cycles]
  resource_stalls.load                              
       [Load buffer stall cycles]
  resource_stalls.mxcsr                             
       [MXCSR rename stall cycles]
  resource_stalls.other                             
       [Other Resource related stall cycles]
  resource_stalls.rob_full                          
       [ROB full stall cycles]
  resource_stalls.rs_full                           
       [Reservation Station full stall cycles]
  resource_stalls.store                             
       [Store buffer stall cycles]
  ssex_uops_retired.packed_double                   
       [SIMD Packed-Double Uops retired (Precise Event)]
  ssex_uops_retired.packed_single                   
       [SIMD Packed-Single Uops retired (Precise Event)]
  ssex_uops_retired.scalar_double                   
       [SIMD Scalar-Double Uops retired (Precise Event)]
  ssex_uops_retired.scalar_single                   
       [SIMD Scalar-Single Uops retired (Precise Event)]
  ssex_uops_retired.vector_integer                  
       [SIMD Vector Integer Uops retired (Precise Event)]
  uop_unfusion                                      
       [Uop unfusions due to FP exceptions]
  uops_decoded.esp_folding                          
       [Stack pointer instructions decoded]
  uops_decoded.esp_sync                             
       [Stack pointer sync operations]
  uops_decoded.ms_cycles_active                     
       [Uops decoded by Microcode Sequencer]
  uops_decoded.stall_cycles                         
       [Cycles no Uops are decoded]
  uops_executed.core_active_cycles                  
       [Cycles Uops executed on any port (core count)]
  uops_executed.core_active_cycles_no_port5         
       [Cycles Uops executed on ports 0-4 (core count)]
  uops_executed.core_stall_count                    
       [Uops executed on any port (core count)]
  uops_executed.core_stall_count_no_port5           
       [Uops executed on ports 0-4 (core count)]
  uops_executed.core_stall_cycles                   
       [Cycles no Uops issued on any port (core count)]
  uops_executed.core_stall_cycles_no_port5          
       [Cycles no Uops issued on ports 0-4 (core count)]
  uops_executed.port0                               
       [Uops executed on port 0]
  uops_executed.port015                             
       [Uops issued on ports 0, 1 or 5]
  uops_executed.port015_stall_cycles                
       [Cycles no Uops issued on ports 0, 1 or 5]
  uops_executed.port1                               
       [Uops executed on port 1]
  uops_executed.port234_core                        
       [Uops issued on ports 2, 3 or 4]
  uops_executed.port2_core                          
       [Uops executed on port 2 (core count)]
  uops_executed.port3_core                          
       [Uops executed on port 3 (core count)]
  uops_executed.port4_core                          
       [Uops executed on port 4 (core count)]
  uops_executed.port5                               
       [Uops executed on port 5]
  uops_issued.any                                   
       [Uops issued]
  uops_issued.core_stall_cycles                     
       [Cycles no Uops were issued on any thread]
  uops_issued.cycles_all_threads                    
       [Cycles Uops were issued on either thread]
  uops_issued.fused                                 
       [Fused Uops issued]
  uops_issued.stall_cycles                          
       [Cycles no Uops were issued]
  uops_retired.active_cycles                        
       [Cycles Uops are being retired (Precise event)]
  uops_retired.any                                  
       [Uops retired (Precise Event)]
  uops_retired.macro_fused                          
       [Macro-fused Uops retired (Precise Event)]
  uops_retired.retire_slots                         
       [Retirement slots used (Precise Event)]
  uops_retired.stall_cycles                         
       [Cycles Uops are not retiring (Precise Event)]
  uops_retired.total_cycles                         
       [Total cycles using precise uop retired event (Precise Event)]

virtual memory:
  dtlb_load_misses.any                              
       [DTLB load misses]
  dtlb_load_misses.large_walk_completed             
       [DTLB load miss large page walks]
  dtlb_load_misses.pde_miss                         
       [DTLB load miss caused by low part of address]
  dtlb_load_misses.stlb_hit                         
       [DTLB second level hit]
  dtlb_load_misses.walk_completed                   
       [DTLB load miss page walks complete]
  dtlb_load_misses.walk_cycles                      
       [DTLB load miss page walk cycles]
  dtlb_misses.any                                   
       [DTLB misses]
  dtlb_misses.large_walk_completed                  
       [DTLB miss large page walks]
  dtlb_misses.pde_miss                              
       [DTLB misses casued by low part of address]
  dtlb_misses.stlb_hit                              
       [DTLB first level misses but second level hit]
  dtlb_misses.walk_completed                        
       [DTLB miss page walks]
  dtlb_misses.walk_cycles                           
       [DTLB miss page walk cycles]
  ept.walk_cycles                                   
       [Extended Page Table walk cycles]
  itlb_flush                                        
       [ITLB flushes]
  itlb_miss_retired                                 
       [Retired instructions that missed the ITLB (Precise Event)]
  itlb_misses.any                                   
       [ITLB miss]
  itlb_misses.large_walk_completed                  
       [ITLB miss large page walks]
  itlb_misses.walk_completed                        
       [ITLB miss page walks]
  itlb_misses.walk_cycles                           
       [ITLB miss page walk cycles]
  mem_load_retired.dtlb_miss                        
       [Retired loads that miss the DTLB (Precise Event)]
  mem_store_retired.dtlb_miss                       
       [Retired stores that miss the DTLB (Precise Event)]
  rNNN                                               [Raw hardware event descriptor]
  cpu/t1=v1[,t2=v2,t3 ...]/modifier                  [Raw hardware event descriptor]
  mem:<addr>[/len][:access]                          [Hardware breakpoint]

Metric Groups:

